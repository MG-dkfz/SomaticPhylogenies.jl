var documenterSearchIndex = {"docs":
[{"location":"ref.html#References","page":"References","title":"References","text":"","category":"section"},{"location":"ref.html#Cells-and-lineages","page":"References","title":"Cells and lineages","text":"","category":"section"},{"location":"ref.html#SomaticPhylogenies.Cell","page":"References","title":"SomaticPhylogenies.Cell","text":"Cell{T<:Integer, F<:AbstractFloat, M<:Real}\n\nRepresents the basic element of a CellLineage.\n\nFields\n\nt::F          : Time point of the cell division that brings the Cell into existence.\nuid::T        : Unique identifier of Cell.\ngeneration::T : Position of Cell within a CellLineage.\nmutations::M  : The number of variants Cell represents. These comprise variants that came about in the mother cell or are created during DNA replication in the mother cell.\n\nBase methods\n\n== : compares uid\n\nSee also: CellLineage, MutationMode, MutationRate\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.exists","page":"References","title":"SomaticPhylogenies.exists","text":"exists(cell::Cell) -> Bool\n\nCheck whether Cell exists; returns false if cell.uid == 0.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.exists_at","page":"References","title":"SomaticPhylogenies.exists_at","text":"exists_at(t::Real, ::Cell) -> Bool\n\nCheck whether Cell exists at time t.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.CellLineage","page":"References","title":"SomaticPhylogenies.CellLineage","text":"const CellLineage = Vector{Cell}\n\nThe successively acquired Cells along CellLineage, where each Cell marks a cell division.\n\nSee also: Cell\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.celltime","page":"References","title":"SomaticPhylogenies.celltime","text":"celltime(::CellLineage) -> Real\n\nReturn the time point of the last cell division along CellLineage.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.cellgeneration","page":"References","title":"SomaticPhylogenies.cellgeneration","text":"cellgeneration(::CellLineage) -> Int\n\nReturn the length of CellLineage.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.num_divisions-Tuple{Vector{<:Cell}}","page":"References","title":"SomaticPhylogenies.num_divisions","text":"num_divisions(::CellLineage) -> Int\n\nReturn the number of division along CellLineage.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.cell_at","page":"References","title":"SomaticPhylogenies.cell_at","text":"cell_at(t, ::CellLineage) -> Cell\n\nReturn the Cell that existed at time t in CellLineage.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.celllineage_at","page":"References","title":"SomaticPhylogenies.celllineage_at","text":"celllineage_at(t, lineage::CellLineage) -> CellLineage\n\nReturn the CellLineage that existed at time t in lineage.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#Mutations","page":"References","title":"Mutations","text":"","category":"section"},{"location":"ref.html#SomaticPhylogenies.MutationMode","page":"References","title":"SomaticPhylogenies.MutationMode","text":"MutationMode\n\nAbstract type that specifies (i) how daughter cells inherit mutations from the mother cell, and (ii) how a Mutation translates to an actual number of mutations.\n\nIt is either TimeCounter or ReplicationCounter.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.TimeCounter","page":"References","title":"SomaticPhylogenies.TimeCounter","text":"TimeCounter <: MutationMode\n\nAssumes that mutations predominantly result from erroneous DNA repair in between cell divisions, replication errors are neglected. Consequently, the same uid is inherited to both daughter Cells. The number of mutations in a Cell depends on the how long the mother cell lived.\n\nSee also: Cell, MutationRate\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.ReplicationCounter","page":"References","title":"SomaticPhylogenies.ReplicationCounter","text":"ReplicationCounter <: MutationMode\n\nAssumes that mutations predominantly result from DNA replication or single-strand mutations that could not be repaired by an otherwise efficient and (practically) error-free DNA repair mechanism. Consequently, each daughter cell inherits its own Mutation. The number of mutations Mutation represents is independent of how long the mother cell lived.\n\nSee also: MutationRate\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.MutGenProcess","page":"References","title":"SomaticPhylogenies.MutGenProcess","text":"MutGenProcess\n\nAbstract type that specifies whether the number of mutations a Cell acquires is random or deterministic.\n\nIt is either DeterministicProcess or PoissonProcess.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.DeterministicProcess","page":"References","title":"SomaticPhylogenies.DeterministicProcess","text":"DeterministicProcess <: MutGenProcess\n\nSpecifies deterministic mutation accumulation in each Cell.\n\nSee also: MutationRate.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.PoissonProcess","page":"References","title":"SomaticPhylogenies.PoissonProcess","text":"PoissonProcess <: MutGenProcess\n\nSpecifies poisson-distributed mutation accumulation in each Cell.\n\nSee also: MutationRate.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.MutationRate","page":"References","title":"SomaticPhylogenies.MutationRate","text":"MutationRate{MM<:MutationMode, MGP<:MutGenProcess}\n\nDetermines mutation accumulation along a CellLineage.\n\nThe two parameters MutationMode and MutGenProcess specify how the single field μ of MutationRate is interpreted.\n\nMutationMode\n\nReplicationCounter : μ has unit mutations per cell division and counts for example the (average) number replication errors. Upon each cell division, each daughter cell inherits all variants from its mother plus a number of novel, private mutations. For DeterministicProcess this number is given by μ, for PoissonProcess μ serves as expectation value for a poisson distrution.\nTimeCounter :  μ has unit mutations per cell and time and counts for example the (average) number of DNA repair errors in between cell divisions. Since these mutations occur before the mother cell divides, both daughter cells inherit the same mutations, which comprise the mutations the mother cell inherited from its mother plus a number of novel mutations, which depend linearly on the lifespan of the mother cell, Δt, where μ serves as proportionality constant (mutation clock). For DeterministicProcess this number is μ Δt, while for PoissonProcess μ Δt serves as expectation value for a poisson distrution.\n\nConstructor\n\nMutationRate(\n    [MM::Type{<:MutationMode} = ReplicationCounter,]\n    μ::Real;\n    poisson::Bool = false,\n)\n\nConstruct MutationRate with value μ. The default MutationMode is ReplicationCounter and PoissonProcess may be specified by setting poisson = true.\n\nSee also: MutationMode, MutGenProcess, CellLineage\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.mutgenprocess-Union{Tuple{MutationRate{MM, MGP}}, Tuple{MGP}, Tuple{MM}} where {MM, MGP}","page":"References","title":"SomaticPhylogenies.mutgenprocess","text":"mutation_mode(::MutationRate) -> MutationMode\n\nReturn the MutationMode of MutationRate.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.mutation_mode-Union{Tuple{MutationRate{MM, MGP}}, Tuple{MGP}, Tuple{MM}} where {MM, MGP}","page":"References","title":"SomaticPhylogenies.mutation_mode","text":"mutgenprocess(::MutationRate) -> MutGenProcess\n\nReturn the MutGenProcess of MutationRate.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#Phylogeny","page":"References","title":"Phylogeny","text":"","category":"section"},{"location":"ref.html#SomaticPhylogenies.Phylogeny","page":"References","title":"SomaticPhylogenies.Phylogeny","text":"Phylogeny\n\nPhylogeny of a cell population at time t.\n\nEach cell of the population is represented by a CellLineage comprising its mutation history.   \n\nFields\n\nlineages::Vector{CellLineage}\nt::Real : The time point of observation.\nμ::MutationRate\nuid_counter::Int : The global uid counter, which ensures that new mutations in a Cell are uniquely identified (infinte-site hyothesis).\n\nSee also: Cell, CellLineage, MutationRate, AbstractProcess\n\n\n\nConstructors\n\nPhylogeny(μ::MutationRate[, N0::Integer, t0])\n\nCreate an initial Phylogeny with N0 (default 1) somatically unmutated founder cells at time t0 (default 0.0).\n\nPhylogeny(μ::MutationRate, N0::Vector{<:Real}[, t0])\n\nIn order to equip the founder cells with somatic mutations, a vector N0 may be passed where length(N0) is the number of founder cells and the elements are the number of founder mutations.\n\nPhylogeny(::CellLineage, μ::MutationRate, t0)\n\nCreate Phylogeny from an existing CellLineage.\n\nSee also: MutationRate\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.mutation_mode-Union{Tuple{Phylogeny{M}}, Tuple{M}} where M<:MutationMode","page":"References","title":"SomaticPhylogenies.mutation_mode","text":"mutation_mode(::Phylogeny) -> MutationMode\n\nReturn the MutationMode of Phylogeny.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.mutgenprocess-Tuple{Phylogeny}","page":"References","title":"SomaticPhylogenies.mutgenprocess","text":"mutgenprocess(::Phylogeny{M}) -> MutGenProcess\n\nReturn the MutGenProcess of Phylogeny.mutation_rate.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.founder_cells","page":"References","title":"SomaticPhylogenies.founder_cells","text":"founder_cells(::Phylogeny) -> Vector{Cell}\n\nReturn the founder cells of Phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.population_size","page":"References","title":"SomaticPhylogenies.population_size","text":"population_size(::Phylogeny) -> Int\n\nReturn the population size of Phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.subpopulation_sizes-Tuple{Phylogeny}","page":"References","title":"SomaticPhylogenies.subpopulation_sizes","text":"subpopulation_sizes(phylo::Phylogeny) -> Dict{Cell, Int}\n\nReturn the number of cells that derive from distinct founder cells.\n\nsubpopulation_sizes(generation::Integer, phylo::Phylogeny) -> Dict{Cell, Int}\n\nInstead of founder cells, a generation may be provided whose Cells define the sub-populations.\n\nsubpopulation_sizes(t::AbstractFloat, phylo::Phylogeny) -> Dict{Cell, Int}\n\nInstead of generation, a time point t may be provided where Cells that existed at t define the sub-populations.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.cellgenerations","page":"References","title":"SomaticPhylogenies.cellgenerations","text":"cellgenerations(phylo::Phylogeny) -> Vector{Int}\n\nReturn the lineage lengths of Phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.num_divisions-Tuple{Phylogeny}","page":"References","title":"SomaticPhylogenies.num_divisions","text":"num_divisions(phylo::Phylogeny) -> Vector{Int}\n\nReturn the number of divisions each lineage of Phylogeny underwent.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.num_mutations-Tuple{Vector{<:Cell}}","page":"References","title":"SomaticPhylogenies.num_mutations","text":"num_mutations(::CellLineage) -> Real\n\nReturn the number of mutations acquired along CellLineage.\n\nnum_mutations(::Phylogeny) -> Vector{<:Real}\n\nReturn the number of mutations acquired along each CellLineage of Phylogeny.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.lineage_vector","page":"References","title":"SomaticPhylogenies.lineage_vector","text":"lineage_vector(::Phylogeny) -> Vector{Cell}\n\nReturn concatanation of all CellLineages in Phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.cell_vector-Tuple{Phylogeny}","page":"References","title":"SomaticPhylogenies.cell_vector","text":"cell_vector(::Phylogeny) -> Vector{Cell}\n\nReturn all Cells that ever occurred in Phylogeny.\n\ncell_vector(generation::Integer, ::Phylogeny) -> Vector{Cell}\n\nReturn all Cells of generation or greater that ever occurred in Phylogeny.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.cell_count-Tuple{Phylogeny}","page":"References","title":"SomaticPhylogenies.cell_count","text":"cell_count(::Phylogeny [, n_min]) -> Int\n\nReturn the total number of distinct Cells that ever occurred in Phylogeny.\n\nIf n_min is specified, only Cells that occur in at least n_min CellLineages are considered.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.clone_sizes","page":"References","title":"SomaticPhylogenies.clone_sizes","text":"clone_sizes(::Phylogeny) -> Dict{Cell, Int}\n\nReturn the number of lineages each Cell occurs in.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.subsampling","page":"References","title":"SomaticPhylogenies.subsampling","text":"subsampling(::Phylogeny, n::Integer) -> Phylogeny\n\nReturn sub-Phylogeny comprising n randomly selected lineages (without replacement).\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.subtree","page":"References","title":"SomaticPhylogenies.subtree","text":"subtree(::Phylogeny, cell::Cell) -> Phylogeny\n\nReturn sub-Phylogeny comprising all lineages that derive from cell.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.select_lineage","page":"References","title":"SomaticPhylogenies.select_lineage","text":"select_lineage(::Phylogeny) -> CellLineage\n\nReturn a randomly selected CellLineage from Phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.site_frequency_spectrum","page":"References","title":"SomaticPhylogenies.site_frequency_spectrum","text":"site_frequency_spectrum(phylo::Phylogeny) -> Vector{<:Real}\n\nReturn the site frequency spectrum, which has the same length as population_size(phylo).\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.MRCA","page":"References","title":"SomaticPhylogenies.MRCA","text":"MRCA(::Phylogeny) -> CellLineage\n\nReturn the CellLineage of the Most Recent Common Ancestor of Phylogeny. \n\nIf no MRCA exists, an empty CellLineage is returned.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.leading_subclones","page":"References","title":"SomaticPhylogenies.leading_subclones","text":"leading_subclones(::Phylogeny, depth::Integer)\n\nDetermine the leading subclones of Phylogeny up to depth.\n\nReturns\n\nclone_structure::Vector{Vector{Pair{<:Cell, NamedTuple{(:clonesize, :Δnmut), Tuple{Int64, Float64}}}}} : Vector of length depth where each element represents the subclones of a level, where level = 1:depth. Each level contains 2^(level - 1) clones, which are represented by a Vector of that length. Each clone is represented by a Pair, where first is the last Cell along the sublineage defining the clone, and second is a NamedTuple containing the clonesize and the number of mutations Δnmut accumulated along the sublineage.\n\nThe relationship between clones across levels is as follows: The first two clones on level L descent from the first clone on level L-1, the third and fourth clones on level L descent from the second clone on level L-1, and so on. Furthermore, it is possible that a clone on some level L represents a single Cell (clonesize = 1), which is therefore still alive at the time of observation. In order to keep above relationship logic valid, \n\n\n\n\n\n","category":"function"},{"location":"ref.html#Processes","page":"References","title":"Processes","text":"","category":"section"},{"location":"ref.html#SomaticPhylogenies.AbstractProcess","page":"References","title":"SomaticPhylogenies.AbstractProcess","text":"AbstractProcess\n\nAbstract supertype of all population-dynamics processes.\n\nThere are three commonalties for the concrete types\n\nA functor is implemented\nThe functor accepts a Phylogeny instance as input\nThe functor returns a Phylogeny instance\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.BirthDeathProcess","page":"References","title":"SomaticPhylogenies.BirthDeathProcess","text":"BirthDeathProcess{F,I} <: AbstractProcess\n\nBirthDeathProcess with division rate λ and loss rate δ.\n\nBirthDeathProcess has three termination conditions: duration Δt, minimal population size N_min, and maximal population size N_max.\n\n\n\nConstructors\n\nBirthDeathProcess(\n    λ::Real,\n    δ::Real;\n    Δt::Real = Inf,\n    N_min::Real = 0,\n    N_max::Real = Inf)\nBirthDeathProcess(\n    λ::Real = 1.0;\n    Δt::Real = Inf,\n    N_min::Real = 0,\n    N_max::Real = Inf)\n\nConstruct BirthDeathProcess. If δ is not provided, it is set to 0.0 (pure birth process).\n\n\n\nFunctors\n\n(::BirthDeathProcess)(μ::MutationRate [, N0, t0::Real]) -> Phylogeny\n(::BirthDeathProcess)(phylo::Phylogeny) -> Phylogeny\n\nSimulate BirthDeathProcess and return Phylogeny.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.MoranProcess","page":"References","title":"SomaticPhylogenies.MoranProcess","text":"MoranProcess{F,I} <: AbstractProcess\n\nMoranProcess with turnover rate λ and population size N.\n\nMoranProcess terminates after duration Δt.\n\n\n\nConstructors\n\nMoranProcess(λ::Real, N::Integer, Δt::Real)\nMoranProcess(N::Integer, Δt::Real)\n\nConstruct MoranProcess. If λ is not provided, it is set to 1.0.\n\n\n\nFunctors\n\n(::MoranProcess)(μ::MutationRate [, t0::Real]) -> Phylogeny\n(::MoranProcess)(μ::MutationRate, N0::Vector[, t0::Real]) -> Phylogeny\n(::MoranProcess)(phylo::Phylogeny) -> Phylogeny\n\nSimulate MoranProcess and return Phylogeny.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.CompositeProcess","page":"References","title":"SomaticPhylogenies.CompositeProcess","text":"CompositeProcess <: AbstractProcess\n\nFields\n\nsubprocesses::Vector{AbstractProcess} : The subprocesses.\n\n\n\nConstructor\n\nCompositeProcess(subprocesses...)\n\n\n\nFunctor\n\n(::CompositeProcess)(phylo::Phylogeny) -> Phylogeny\n\nSimulate the processes of CompositeProcess successively and return Phylogeny.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#Whole-genome-sequencing","page":"References","title":"Whole-genome sequencing","text":"","category":"section"},{"location":"ref.html#SomaticPhylogenies.SamplingMode","page":"References","title":"SomaticPhylogenies.SamplingMode","text":"SamplingMode\n\nAbstract type that specifies how whole-genome sequencing is simulated.\n\nIt is either BinomialSampling, PoissonBinomialSampling, or BetaSampling.\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.BinomialSampling","page":"References","title":"SomaticPhylogenies.BinomialSampling","text":"BinomialSampling <: SamplingMode\n\nThe simulated read counts for variants are assumed to be binomially distributed while the coverage for each genomic site is the same (= sequencing depth).\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.PoissonBinomialSampling","page":"References","title":"SomaticPhylogenies.PoissonBinomialSampling","text":"PoissonBinomialSampling <: SamplingMode\n\nThe simulated read counts for variants are assumed to be binomially distributed and the coverage of a genomic site is assumed to be poisson-distributed (sequencing depth = mean(poisson)).\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.BetaSampling","page":"References","title":"SomaticPhylogenies.BetaSampling","text":"BetaSampling <: SamplingMode\n\nInstead of simulating read counts and coverages, the variant allele frequencies are directly determined with a Beta distribution.\n\nAs the number of variants at true allele frequency x becomes larger, while each individual variant follows BinomialSampling, the measured variant allele frequencies converge against a Beta distribution characterized by α = x * (seq_depth - 1), β = (1 - x) * (seq_depth - 1).\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.WholeGenomeSequencing","page":"References","title":"SomaticPhylogenies.WholeGenomeSequencing","text":"WholeGenomeSequencing{SM<:SamplingMode}\n\nObject to simulate whole-genome sequencing.\n\nFields\n\ndepth::Int : The (average) coverage of genomic sites.\nvaf_edges::Vector{Float64} : The bin edges for variant allele frequencies\nread_min::Int : Only variants with number of reads ≥ read_min are considered in sequencing output.\n\n\n\nConstructors\n\nWholeGenomeSequencing(\n    ::Type{<:SamplingMode},\n    [vaf_edges::AbstractVector{<:AbstractFloat},]\n    depth::Integer;\n    read_min::Integer=1,\n    read_step::Integer=1)\n\nCreate WholeGenomeSequencing for SamplingMode and (average) coverage depth. If vaf_edges is not provided, it will be specified according to unique(push!(collect(read_min/depth : read_step/depth : 1), 1)).\n\nSamplingMode is either BetaSampling, BinomialSampling, or PoissonBinomialSampling.\n\nOptional keyword arguments\n\nread_min::Integer=1 : The minimal read count to use in sequencing output.\nread_step::Integer=1 : The number of reads between two adjacent vaf_edges (only relevant if vaf_edges is not supplied).\n\nSee also: SamplingMode\n\nFunctor\n\n(wgs::WholeGenomeSequencing{<:SamplingMode})(::Phylogeny) -> SequencingResult\n(wgs::WholeGenomeSequencing{<:SamplingMode})(::Vector{<:Real}) -> SequencingResult\n\nSimulate WholeGenomeSequencing and return SequencingResult. The input is either a Phylogeny or an already computed site frequency spectrum.\n\nSee also: SamplingMode, site_frequency_spectrum\n\nReturns\n\nA SequencingResult comprising two fields:\n\nwgs::WholeGenomeSequencing    : The WholeGenomeSequencing object used for simulations.\nvaf_histogram::Vector{<:Real} : The simulated distribution of variant allele frequencies across wgs.vaf_edges.\n\nSee also: SequencingResult\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.SequencingResult","page":"References","title":"SomaticPhylogenies.SequencingResult","text":"SequencingResult\n\nResult of whole-genome sequencing.\n\nFields\n\nwgs::WholeGenomeSequencing    : The WholeGenomeSequencing object used for simulations.\nvaf_histogram::Vector{<:Real} : The simulated number of variant allele frequencies (vafs) across wgs.vaf_edges. Specifically, the k-th value counts vaf_edges[k] ≤ vaf < vaf_edges[k+1], where 1 ≤ k < length(vaf_edges); the number of variants with vaf = 1 is vaf_histogram[end].\n\nSee also: WholeGenomeSequencing\n\n\n\n\n\n","category":"type"},{"location":"ref.html#SomaticPhylogenies.sampling_mode","page":"References","title":"SomaticPhylogenies.sampling_mode","text":"sampling_mode(::WholeGenomeSequencing) -> Type{<:SamplingMode}\n\nReturn the SamplingMode of WholeGenomeSequencing instance.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.vaf_min-Tuple{WholeGenomeSequencing}","page":"References","title":"SomaticPhylogenies.vaf_min","text":"vaf_min(::WholeGenomeSequencing) -> Float64\nvaf_min(::SequencingResult) -> Float64\n\nReturn the lowest value of vaf_edges.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.vaf_step-Tuple{WholeGenomeSequencing}","page":"References","title":"SomaticPhylogenies.vaf_step","text":"vaf_step(::WholeGenomeSequencing) -> Float64\nvaf_step(::SequencingResult) -> Float64\n\nReturn the width of the first bin of vaf_edges.\n\n\n\n\n\n","category":"method"},{"location":"ref.html#SomaticPhylogenies.cumulative_counts","page":"References","title":"SomaticPhylogenies.cumulative_counts","text":"cumulative_counts(::SequencingResult) -> Vector{Float64}\n\nReturn the cumulative mutation counts of SequencingResult.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.vafhistogram","page":"References","title":"SomaticPhylogenies.vafhistogram","text":"vafhistogram(::SequencingResult)\nvafhistogram!(::SequencingResult)\n\nPlot the simulated vaf histogram.\n\n\n\n\n\n","category":"function"},{"location":"ref.html#SomaticPhylogenies.vafogram","page":"References","title":"SomaticPhylogenies.vafogram","text":"vafogram(::SequencingResult)\nvafogram!(::SequencingResult)\n\nPlot the number of variants greater-or-equal than vaf versus inverted vaf.\n\n\n\n\n\n","category":"function"},{"location":"index.html#SomaticPhylogenies","page":"Home","title":"SomaticPhylogenies","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SomaticPhylogenies provides a framework to simulate the accumulation and dispersion of somatic mutations across a cell population over time. Currently, two elementary stochastic processes are implemented: BirthDeathProcess and MoranProcess. Both generate a Phylogeny, which contains the full mutation history of the cell population. Various functions exists to analyze or further process the Phylogeny. For example, WholeGenomeSequencing may be simulated, subsampling, or the MRCA may be determined. For a complete list of implemented types and methods, see References.","category":"page"},{"location":"index.html#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"In this example, we want to sequence a population of cells. The first step is to specify a stochastic process. We choose a BirthDeathProcess with division rate λ = 1 and loss rate δ = 0.1 that lasts for a time period of Δt = 10.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Phylogeny\n\nλ = 1    # division rate\nδ = 0.1  # loss rate\nprocess = BirthDeathProcess(λ, δ; Δt = 10)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To run the simulation, we first have to decide how and with which rate mutations are accumulated. The how is addressed by the abtract type MutationMode; we opt for ReplicationCounter. In this case, mutations occur with every cell division, and a MutationRate generating 2 mutations per cell division is specified as follows:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"μ = MutationRate(ReplicationCounter, 2)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Next, we have to specify the initial number of cells N0 (defaults to 1) and the initial time point t0 (defaults to 0.0). Using the defaults, a Phylogeny is simulated by calling process with μ:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"phylo = process(μ)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Next, we want to sequence the cell population. For this, we define WholeGenomeSequencing. We have to provide the sequencing depth and (optionally) the bin edges for the variant allele frequencies. Furthermore, the SamplingMode must be specified; we opt for PoissonBinomialSampling.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"depth = 90\nvaf_edges = 0.05:0.05:1\nwgs = WholeGenomeSequencing(PoissonBinomialSampling, vaf_edges, depth; read_min=3)\nseq_res = wgs(phylo)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Finally, we can visualize the SequencingResult with vafhistogram and vafogram.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Plots\n\np1 = vafhistogram(seq_res)\np2 = vafogram(seq_res)\nplot(p1, p2)","category":"page"}]
}
